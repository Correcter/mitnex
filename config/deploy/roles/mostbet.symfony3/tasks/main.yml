---

- include: "{{symfony_project_pre_run | default('empty.yml')}}"

# tasks file for symfony2
- include: 00-facts.yml

- name: Check lock file
  register: lock_file
  shell: if [ -f "/tmp/lockfile" ]; then cat /tmp/lockfile; fi

- fail:
    msg: "Деплой заблокирован веткой {{lock_file.stdout}}"
  when: lock_file.stdout != "" and lock_file.stdout != symfony_project_branch

- name: Create lock file
  shell: echo {{ symfony_project_branch }} > /tmp/lockfile
  when: symfony_project_lock|bool == True

- name: Create base deployment directories.
  file: state=directory path={{item.path}}
  with_items:
    - { path: "{{symfony_current_release_dir}}" }
    - { path: "{{symfony_shared_dir}}" }

- name: Create managed shared directories.
  file: state=directory path="{{symfony_shared_dir}}/{{item.path}}"
  with_items: "{{symfony_project_shared_folders}}"

- name: Pull sources from the repository.
  # Используем результат предыдущего релиза как копию удаленного репозитария и получаем из BitBucket только измененные файлы
  shell: git lfs clone --dissociate --reference-if-able {{symfony_project_root}}/current {{symfony_project_repo}} {{symfony_current_release_dir}}

- name: Checking out our release branch without downloading lfs-objects
  shell: cd {{symfony_current_release_dir}} && GIT_LFS_SKIP_SMUDGE=1 git checkout {{symfony_project_branch}}

- name: Fetching lfs-objects
  shell: cd {{symfony_current_release_dir}} && git lfs fetch && git lfs pull

- name: Find out the name of the current branch
  shell: cd {{symfony_current_release_dir}} && git rev-parse --abbrev-ref HEAD
  register: cloned_branch

- name: Find out the name of the current commit
  shell: cd {{symfony_current_release_dir}} && git rev-parse HEAD
  register: cloned_commit

- name: Check branch has last release commit.
  shell: git --git-dir={{symfony_current_release_dir}}/.git log --pretty=format:"%H" | grep {{last_release_commit}} || true
  register: last_release_found_output
  run_once: true

- pause:
    prompt: "Ветка не содержит последний релиз. Продолжить (y/n)?"
  register: ask_user_continue_output
  delegate_to: localhost
  when: last_release_found_output.stdout == "" and ignore_old_release != "y"

- meta: end_play
  when: last_release_found_output.stdout == "" and ignore_old_release != "y" and ask_user_continue_output.user_input != "y"

- name: Ensure shared folders are absent in release.
  file: state=absent path="{{symfony_current_release_dir}}/{{item.path}}"
  with_items: "{{symfony_project_shared_folders}}"

- name: Ensure managed folders are present.
  file: state=directory path="{{symfony_current_release_dir}}/{{item.path}}"
  with_items: "{{symfony_project_managed_folders}}"

- name: Read composer.json
  shell: cat {{symfony_current_release_dir}}/composer.json
  register: composer_content

- include: "{{symfony_project_post_folder_creation_tasks | default('empty.yml')}}"

- name: Create symlinks to shared directories.
  file: state=link src="{{symfony_shared_dir}}/{{item.src}}" path="{{symfony_current_release_dir}}/{{item.path}}"
  with_items: "{{symfony_project_shared_folders}}"

- include: 10-config.yml

- include: 20-composer.yml

- include: "{{symfony_project_pre_cache_warmup_tasks | default('empty.yml')}}"

- include: 30-cache.yml

- include: 40-assets.yml

- include: 50-migrations.yml

- name: Create release file.
  copy: content="{{symfony_current_release}}" dest="{{symfony_current_release_dir}}/RELEASE" mode=644

- include: "{{symfony_project_pre_live_switch_tasks | default('empty.yml')}}"

- name: Create symlink for release.
  file: state=link src="{{symfony_current_release_dir}}" path="{{symfony_project_root}}/current"

- include: "{{symfony_project_post_live_switch_tasks | default('empty.yml')}}"

- include: 60-clean_releases.yml

- include: "{{symfony_project_post_run | default('empty.yml')}}"
